" compile time features
"
" +clipboard +eval +extra_search +folding +job +keymap +packages
" +profile +reltime +signs +syntax +timers  +viminfo 
set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set backupdir=$XDG_DATA_HOME/vim/backup
set belloff=all
set complete-=i
set completeopt=menu,menuone,noselect
set cursorline
set directory=$XDG_DATA_HOME/vim/swap
set fo+=jpor
set foldenable
set foldmethod=indent
set formatoptions=jcroqlnt
set grepformat="%f:%l:%c:%m"
" TODO: set errorformat
set grepprg=rg\ --vimgrep
set guicursor=""
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=1
set magic
set nofoldenable
set novisualbell
set nowrap
set number
set omnifunc=syntaxcomplete#Complete
set packpath^=$XDG_DATA_HOME/vim
set path+=.,,
set pumheight=12
set rtp+=$XDG_DATA_HOME/vim
set ruler
set scrolloff=8
set shortmess=ltToOCFc
set showcmd
set showmode
set signcolumn="1"
set smartcase
set splitright
set tabpagemax=50
set tabstop=4
set tags=./tags,tags;
set textwidth=73
set title
set ttimeout
set ttimeoutlen=5
set undodir=$XDG_DATA_HOME/vim/undo
set undofile
set undolevels=500
set updatetime=200
set viewoptions="unix,slash"
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum,tagfile

syntax on
filetype plugin indent on

" create paths for directories set
if !isdirectory(&backupdir)
		call mkdir(&backupdir, "p", 0700)
endif

if !isdirectory(&directory)
		call mkdir(&directory, "p", 0700)
endif

if !isdirectory(&undodir)
		call mkdir(&undodir, "p", 0700)
endif

highlight clear SignColumn

" redundant if vim is compiled without these features
" " disable Python 2 support.
" let g:loaded_python_provider = 0
" " disable Ruby support.
" let g:loaded_ruby_provider = 0
" " disable nodeJS support.
" let g:loaded_node_provider = 0
" " disable Perl support
" let g:loaded_perl_provider = 0

" disable extra plugins
let g:loaded_2html_plugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_netrw = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_remote_plugins =  1
let g:loaded_rrhelper = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
let g:netrw_nogx = 1

let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 100

let g:highlightedyank_highlight_duration = 150

let g:gutentags_cache_dir = expand('$XDG_DATA_HOME') . '/vim/tags'
let g:ale_disable_lsp = 1

" keybindings

" change map leader to space
let mapleader=" "

packadd comment
packadd matchit
packadd editorconfig

function! PackInit() abort
		packadd minpac

		" bootstrap minpac
		if !exists('g:loaded_minpac')
				let out = system('git clone https://github.com/k-takata/minpac '
						\ .. $XDG_DATA_HOME .. '/vim/pack/minpac/opt/minpac')
				if v:shell_error
						echo 'Error cloning minpac: ' .. out
						return
				endif
				packadd minpac
		endif

		call minpac#init()
		call minpac#add('https://github.com/k-takata/minpac', {'type': 'opt'})
		call minpac#add('https://github.com/tpope/vim-unimpaired')
		call minpac#add('https://github.com/airblade/vim-gitgutter')
		call minpac#add('https://github.com/romainl/vim-cool')
		call minpac#add('https://github.com/tpope/vim-surround')
		call minpac#add('https://github.com/junegunn/rainbow_parentheses.vim')
		call minpac#add('https://github.com/tpope/vim-repeat')
		call minpac#add('https://github.com/wellle/targets.vim')
		call minpac#add('https://github.com/lifepillar/vim-mucomplete')
		call minpac#add('https://github.com/machakann/vim-highlightedyank')
		call minpac#add('https://github.com/ludovicchabant/vim-gutentags')
		call minpac#add('https://github.com/dense-analysis/ale')
endfunction

command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

autocmd Syntax * RainbowParentheses

nnoremap <silent> [d <Plug>(ale_previous_wrap)
nnoremap <silent> ]d <Plug>(ale_next_wrap)

function! FzyCommand(choice_command, vim_command)
  try
    let output = system(a:choice_command . " | fnf ")
  catch /Vim:Interrupt/
    " Swallow errors from ^C, allow redraw! below
  endtry
  redraw!
  if v:shell_error == 0 && !empty(output)
    exec a:vim_command . ' ' . output
  endif
endfunction

nnoremap <leader>ff :call FzyCommand("fd", ":e")<cr>

nnoremap <leader><leader> :set nomore <Bar> echo ":buffers" <Bar> :ls <Bar> :set more <CR>:b<Space>
nnoremap <leader>n :enew<CR>
nnoremap <leader>q :bd<CR>
nnoremap <leader>cd :cd %:p:h <Bar> echo getcwd()<CR>
nnoremap Y y$
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>
nnoremap & :&&<CR>

nnoremap <leader>n :enew<CR>

" switch tabs quickly
nnoremap <leader>1 1gt<CR>
nnoremap <leader>2 2gt<CR>
nnoremap <leader>3 3gt<CR>
nnoremap <leader>4 4gt<CR>
nnoremap <leader>5 5gt<CR>
nnoremap <leader>6 6gt<CR>
nnoremap <leader>7 7gt<CR>
nnoremap <leader>8 8gt<CR>
nnoremap <leader>9 9gt<CR>
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>x :tabclose<CR>

" resize splits with ctrl + arrows
nnoremap <C-Up> :resize -2<CR>
nnoremap <C-Down> :resize +2<CR>
nnoremap <C-Left> :vertical resize +2<CR>
nnoremap <C-Right> :vertical resize -2<CR>

" don't lose selection when shifting text
xnoremap < <gv
xnoremap > >gv

nnoremap gx :silent !xdg-open <cfile><CR>

omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" Escape special characters in a string for exact matching.
" This is useful to copying strings from the file to the search tool
" Based on this - http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim
function! EscapeString (string)
  let string=a:string
  " Escape regex characters
  let string = escape(string, '^$.*\/~[]')
  " Escape the line endings
  let string = substitute(string, '\n', '\\n', 'g')
  return string
endfunction

" Get the current visual block for search and replaces
" This function passed the visual block through a string escape function
" Based on this - https://stackoverflow.com/questions/676600/vim-replace-selected-text/677918#677918
function! GetVisual() range
  " Save the current register and clipboard
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&

  " Put the current visual selection in the " register
  normal! ""gvy
  let selection = getreg('"')

  " Put the saved registers and clipboards back
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save

  "Escape any special characters in the selection
  let escaped_selection = EscapeString(selection)

  return escaped_selection
endfunction

" Start the find and replace command across the entire file
vnoremap <C-r> <Esc>:%s/<c-r>=GetVisual()<cr>//g<left><left>
