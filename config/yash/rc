#
# ~/.config/yash/rc
#

case $- in (*m*)
  trap - TSTP TTIN TTOU
esac

set -o emacs
set --brace-expand
set --extended-glob
set --hist-space
set --le-predict
set --no-unset

# define some basic variables if missing
: ${LOGNAME:=$(logname)} ${HOSTNAME:=$(uname -n)}
YASH_PS1='${LOGNAME}@${HOSTNAME}:${${${PWD:/~/\~}##*/}:-$PWD} $ ' 
PROMPT_COMMAND=()

HISTFILE="$XDG_STATE_HOME"/yash/history
HISTSIZE=2000
HISTRMDUP=1

# create HISTFILE parent directory if missing
! [ -d "${HISTFILE%/*}" ] && mkdir -p "${HISTFILE%/*}"

PATH="$PATH:$HOME/.local/bin:$HOME/.local/share/cargo/bin"
export PATH

bindkey --emacs '\^L' clear-and-redraw-all
bindkey --vi-insert '\^L' clear-and-redraw-all
bindkey --vi-command '\^L' clear-and-redraw-all

bindkey --emacs '\^[[1;5D' backward-emacsword
bindkey --emacs '\^[[1;5C' forward-emacsword

# avoid removing/overwriting existing files by accident
cp() if [ -t 0 ]; then command cp -iv "$@"; else command cp "$@"; fi
mv() if [ -t 0 ]; then command mv -iv "$@"; else command mv "$@"; fi
rm() if [ -t 0 ]; then command rm -iv "$@"; else command rm "$@"; fi


# enable color support of ls and also add handy aliases
if [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then
    if command -v dircolors > /dev/null; then
        [ -r ~/.dircolors ] &&  eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi
  alias ls='ls -G'
  alias grep='grep -G'
  alias fgrep='fgrep -G'
  alias egrep='egrep -G'
  alias tree='tree -C'
  alias ip='ip -color=auto'
fi

# find escape sequence to change terminal window title
case "$TERM" in
  (xterm|xterm[+-]*|gnome|gnome[+-]*|putty|putty[+-]*|cygwin)
    _tsl='\033];' _fsl='\a' ;;
  (*)
    _tsl=$( (tput tsl 0; echo) 2>/dev/null |
      sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g')
          _fsl=$( (tput fsl  ; echo) 2>/dev/null |
            sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g') ;;
          esac

# if terminal window title can be changed...
if [ "$_tsl" ] && [ "$_fsl" ]; then

  # set terminal window title on each prompt
  _set_term_title()
  if [ -t 2 ]; then
    printf "$_tsl"'%s@%s:%s'"$_fsl" "${LOGNAME}" "${HOSTNAME%%.*}" \
      "${${PWD:/$HOME/\~}/#$HOME\//\~\/}" >&2
  fi
  PROMPT_COMMAND=("$PROMPT_COMMAND" '_set_term_title')

  # reset window title when changing host or user
  ssh() {
    if [ -t 2 ]; then printf "$_tsl"'ssh %s'"$_fsl" "$*" >&2; fi
    command ssh "$@"
  }
  su() {
    if [ -t 2 ]; then printf "$_tsl"'su %s'"$_fsl" "$*" >&2; fi
    command su "$@"
  }
  sudo() {
    if [ -t 2 ]; then printf "$_tsl"'sudo %s'"$_fsl" "$*" >&2; fi
    command sudo "$@"
  }
  doas() {
    if [ -t 2 ]; then printf "$_tsl"'doas %s'"$_fsl" "$*" >&2; fi
    command doas "$@"
  }

fi


# some more ls aliases
alias ll='ls -Ahl1'
alias la='ls -A'
alias l='ls -CF'
alias j='jobs -l'
alias h='fc -l'
alias r='fc -l | fnf | cut -f 2- - | sh'
alias sudo='doas'
alias bc='bc --mathlib --quiet'
alias pidgin='pidgin --config="$XDG_DATA_HOME"/purple'
alias mbsync='mbsync -c "$XDG_CONFIG_HOME"/isync/mbsyncrc'
alias wget='wget --hsts-file="$XDG_CACHE_HOME/wget-hsts"'
alias dosbox='dosbox -conf "$XDG_CONFIG_HOME"/dosbox/dosbox.conf'
alias abook='abook --config "$XDG_CONFIG_HOME"/abook/abookrc --datafile "$XDG_DATA_HOME"/abook/addressbook'
alias ytflac='yt-dlp -xq --audio-format flac --audio-quality 10'
alias vkquake='gamemoderun vkquake -basedir ~/.local/share/Steam/steamapps/common/Quake'
alias bat="cat /sys/class/power_supply/BAT0/{capacity,status}"
alias cam="mpv av://v4l2:/dev/video0"
alias weather="curl wttr.in"
alias d='dirs -v'
# handle programs that incorrectly read EDITOR instead of VISUAL
alias neomutt="EDITOR=$VISUAL neomutt"
alias pass="EDITOR=$VISUAL pass"

diff() {
  if [ -t 0 ]; then
    if command -v diff-so-fancy >/dev/null; then
      command diff -u "$@" | diff-so-fancy
    else
      command diff -u "$@" | sed 's/^-/\x1b[31m-/;s/^+/\x1b[32m+/;s/^@/\x1b[1;34m@/;s/$/\x1b[0m/'
    fi
  else
    command diff -u "$@"
  fi
}


cd() {
  if [ -t 0 ] && [ "$#" -ne 0 ]; then
    command pushd --remove-duplicates --default-directory="$HOME" "$@"
  else
    command cd
  fi
}

alias f='fff'
# FIXME: this doesn't work for some reason
alias cleanpatches='find -type f \( -name "*.orig" -o -name "*.rej" \) -delete'
alias -- -='cd -'
alias glow='pandoc -f commonmark_x $@ -t ansi'

# simple markdown planner
# 
# ~/aarons-space/tasks.md
# =====
# # aaron's space
# ### today
# 
# - [ ] one
# - [ ] two
# 
# ### later
#
# - [ ] one
# - [ ] two

# planner aliases
alias today='cat ~/aarons-space/tasks.md | head -n $(($(grep -n "### \`later\`" ~/aarons-space/tasks.md | cut -f1 -d:) - 1))'
alias later='cat ~/aarons-space/tasks.md | tail -n $(($(wc -l ~/aarons-space/tasks.md | awk "{print \$1}") - $(grep -n "### \`later\`" ~/aarons-space/tasks.md | cut -f1 -d:) + 1))'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

c() {
  dir=$(fd -H -t d | fnf)
  [ -d "$dir" ] && cd "$dir"
}

t() {
  fd -H -t f -t d | fnf
}

ff() {
  files=$(fd -H | fnf)
  [ -n "$files" ] && "$VISUAL" "$files"
}

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# vim: filetype=sh
